package redoLog;


import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Enumeration;

import javax.imageio.IIOException;

public class UpdateOp {
//	Relation city = new Relation("city.db");
//	Relation country = new Relation("country.db");
	Relation r;
	Relation oldcity =new Relation("city_backup.db");
	Relation oldcountry= new Relation("country_backup.db");
	int popindex;
	byte[] newenumofr=null;
	RedoLog log;
	
	
	public UpdateOp()  {

	}
		
	
	public void UpdateOP(Relation r,int j){
		try{	
			this.r=r;
			if(j==4){
				popindex=4;	
				log= new RedoLog("city.log");
				
			}else{
				popindex=6;
				log= new RedoLog("country.log");
			}
		 }catch(IOException e){
			 e.printStackTrace();
		 }
		log.writeInit();
		log.writeStart();
	
		String[] tumpleofr = null;
		Enumeration<byte[]> enumofr = r.getValuesEnum();
		while (enumofr.hasMoreElements()){
			byte[] rtupleofbyte = enumofr.nextElement();
			
			try {
				tumpleofr = splitoftuple(rtupleofbyte);
				
			} catch (UnsupportedEncodingException exp) {
				exp.printStackTrace();
			}
//			Long tupleP=Long.parseLong(tumpleofr[popindex]);
			Double tupleP = Double.parseDouble(tumpleofr[popindex]);
			Long newtumpleP=(long) (tupleP*1.02);
			tumpleofr[popindex]=newtumpleP.toString();
           try{
        	   newenumofr=unsplitoftuple(tumpleofr);
           }catch(UnsupportedEncodingException e){
        	   e.printStackTrace();
        	   
           }
           r.put(tumpleofr[0].hashCode(), newenumofr);
           
           log.writeUpdate(tumpleofr[0].hashCode() ,tumpleofr[1],tupleP, newtumpleP);

             
		}
		r.saveContents();
        try{log.savelog();}catch(IOException e){e.printStackTrace();}
        log.clearlog();
		
	}
	
	public void open(){
		
	}
	
	public void getNext() {
		if(popindex==4){r=oldcity;}else{r=oldcountry;};
		String[] oldtumple=null;
		String[] logtumple=null;
		byte[] oldtumpleofr=null;
		byte[] oldtumplebyte=null;
		
			try (BufferedReader br = new BufferedReader(new FileReader(log.getfilename()))) {
			    String line;
			    while ((line = br.readLine()) != null) {
			    	 if(!line.equals("<INIT>")&&!line.equals("<START>") &&!line.equals("<COMMIT>")){
			    		 logtumple=line.split(","); 
			    		 int j=Integer.parseInt(logtumple[1]);
			    		 System.out.println(j);
			    		 oldtumplebyte=r.get(Integer.parseInt(logtumple[1]));
			             
			    		 oldtumple=splitoftuple(oldtumplebyte);
			    		 oldtumple[popindex]=logtumple[4];
			    		oldtumpleofr=unsplitoftuple(oldtumple);
			    		r.put(oldtumple[0].hashCode(),oldtumpleofr );			    		 
			    	 }
			    }
			}catch(FileNotFoundException e){e.printStackTrace();}catch(IOException ex){ex.printStackTrace();}   
	    r.saveContents();
    }
		
	
	
	public void close(){
//     log.writeCommit();
//	 try{log.savelog();}catch(IOException e){e.printStackTrace();}
//	 log.clearlog();
	 this.getNext();
		
	}
	
	public String[] splitoftuple(byte[] tuple) throws UnsupportedEncodingException {
		String str = new String(tuple, StandardCharsets.UTF_8);
		return str.split(","); // ignores commas inside quotation marks
	}
	protected static byte[] unsplitoftuple(String[] splitArray)throws UnsupportedEncodingException {
			String retString = null;
			for (String str : splitArray) {
			    if (retString == null) {
				retString = str;
			    }
			    else {
				retString = retString + "," + str;
			    }
			}
			
			return retString.getBytes("UTF-8");
		    }
}

