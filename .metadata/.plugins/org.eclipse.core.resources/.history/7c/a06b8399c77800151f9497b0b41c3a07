package hashIndex;

import java.io.Serializable;
import java.util.HashMap;

public class Bucket implements Serializable{
	private static final long serialVersionUID = -9184164241837197805L;
//<<<<<<< Updated upstream
//	private int blockBitsNumber;
//	public static final int blockSize = 2;
//	private HashMap[] blockContents;
//=======
//<<<<<<< HEAD
//	private int totalLength;
//	public static int bucketSize = 4;
//	private int count;
//	private HashMap[] contents;
//=======
	private int blockBitsNumber;
	public static final int blockSize = 2;
	private HashMap[] blockContents;
//>>>>>>> origin/master
//>>>>>>> Stashed changes
	
	/**
	 * This is constructor. 
	 * @param blockBitsNumber
	 */
//<<<<<<< Updated upstream
//	public Bucket(int blockBitsNumber){
//		this.blockBitsNumber = blockBitsNumber;
//	//	this.blockContents = new HashMap[blockSize];	
//=======
//<<<<<<< HEAD
//	public Bucket(int totalLength){
//		count = 0;
//		this.totalLength = totalLength;
//		contents = new HashMap[bucketSize];	
//=======
	public Bucket(int blockBitsNumber){
		this.blockBitsNumber = blockBitsNumber;
	//	this.blockContents = new HashMap[blockSize];	
//>>>>>>> origin/master
//>>>>>>> Stashed changes
	}
	
	public int getLength(){
		return blockBitsNumber;
	}
	
	public void incrementLength(){
		this.blockBitsNumber++;
	}
	
	public void insert(String key, String dataValue){
<<<<<<< Updated upstream
=======
<<<<<<< HEAD
		for(int i=0 ; i<bucketSize ; i++){
			if(contents[i] ==null){
				contents[i].put(key, dataValue);
			    count++;
				break;
			}
=======
>>>>>>> Stashed changes
		for(int i=0 ; i<blockSize ; i++){
			if(blockContents[i] ==null){
				blockContents[i].put(key, dataValue);
				return;
			}	
<<<<<<< Updated upstream
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
		}
		return;
	}

	public boolean remove(String key){
		return false;
	}
	
<<<<<<< Updated upstream
	public boolean ifExistSpace(){
		if(this.blockContents[blockSize-1] == null){
=======
<<<<<<< HEAD
	public boolean existSpace(){
		if(count == bucketSize-1)
			return false;
		else
=======
	public boolean ifExistSpace(){
		if(this.blockContents[blockSize-1] == null){
>>>>>>> origin/master
>>>>>>> Stashed changes
			return true;
		}else return false;
	}
	
	public void moreSpace(){
		bucketSize *= 2;
		HashMap[] newBucket = new HashMap[bucketSize];
		for(int n=0; n<count; n++){
			newBucket[n] = this.contents[n];
		}
		this.contents = newBucket;
	}
}
